// megafunction wizard: %FIFO%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: dcfifo 

// ============================================================
// File Name: my_fifo.v
// Megafunction Name(s):
// 			dcfifo
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 13.0.0 Build 156 04/24/2013 SJ Web Edition
// ************************************************************


//Copyright (C) 1991-2013 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//dcfifo_mixed_widths DEVICE_FAMILY="Cyclone II" LPM_NUMWORDS=16 LPM_SHOWAHEAD="OFF" LPM_WIDTH=10 LPM_WIDTH_R=10 LPM_WIDTHU=4 LPM_WIDTHU_R=4 OVERFLOW_CHECKING="ON" RAM_BLOCK_TYPE="M4K" RDSYNC_DELAYPIPE=4 UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRITE_ACLR_SYNCH="OFF" WRSYNC_DELAYPIPE=4 aclr data q rdclk rdempty rdfull rdreq rdusedw wrclk wrfull wrreq wrusedw INTENDED_DEVICE_FAMILY="Cyclone II" lpm_hint="RAM_BLOCK_TYPE=M4K" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 13.0 cbx_a_gray2bin 2013:04:24:18:08:47:SJ cbx_a_graycounter 2013:04:24:18:08:47:SJ cbx_altdpram 2013:04:24:18:08:47:SJ cbx_altsyncram 2013:04:24:18:08:47:SJ cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_dcfifo 2013:04:24:18:08:47:SJ cbx_fifo_common 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_lpm_compare 2013:04:24:18:08:47:SJ cbx_lpm_counter 2013:04:24:18:08:47:SJ cbx_lpm_decode 2013:04:24:18:08:47:SJ cbx_lpm_mux 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_scfifo 2013:04:24:18:08:47:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_stratixiii 2013:04:24:18:08:47:SJ cbx_stratixv 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//a_gray2bin device_family="Cyclone II" WIDTH=5 bin gray
//VERSION_BEGIN 13.0 cbx_a_gray2bin 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  my_fifo_a_gray2bin
	( 
	bin,
	gray) /* synthesis synthesis_clearbox=1 */;
	output   [4:0]  bin;
	input   [4:0]  gray;

	wire  xor0;
	wire  xor1;
	wire  xor2;
	wire  xor3;

	assign
		bin = {gray[4], xor3, xor2, xor1, xor0},
		xor0 = (gray[0] ^ xor1),
		xor1 = (gray[1] ^ xor2),
		xor2 = (gray[2] ^ xor3),
		xor3 = (gray[4] ^ gray[3]);
endmodule //my_fifo_a_gray2bin


//a_graycounter DEVICE_FAMILY="Cyclone II" WIDTH=5 aclr clock cnt_en q
//VERSION_BEGIN 13.0 cbx_a_gray2bin 2013:04:24:18:08:47:SJ cbx_a_graycounter 2013:04:24:18:08:47:SJ cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ  VERSION_END

//synthesis_resources = reg 8 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to sub_parity6a[0]} POWER_UP_LEVEL=HIGH"} *)
module  my_fifo_a_graycounter
	( 
	aclr,
	clock,
	cnt_en,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	counter7a;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	parity5;
	reg	[1:0]	sub_parity6a;
	wire  [4:0]  cntr_cout;
	wire  parity_cout;
	wire sclr;
	wire updown;

	// synopsys translate_off
	initial
		counter7a[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[0:0] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[0:0] <= 1'b0;
			else  counter7a[0:0] <= ((cnt_en & (counter7a[0:0] ^ (~ parity_cout))) | ((~ cnt_en) & counter7a[0:0]));
	// synopsys translate_off
	initial
		counter7a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[1:1] <= 1'b0;
			else  counter7a[1:1] <= (counter7a[1:1] ^ (counter7a[0:0] & cntr_cout[0]));
	// synopsys translate_off
	initial
		counter7a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[2:2] <= 1'b0;
			else  counter7a[2:2] <= (counter7a[2:2] ^ (counter7a[1:1] & cntr_cout[1]));
	// synopsys translate_off
	initial
		counter7a[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[3:3] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[3:3] <= 1'b0;
			else  counter7a[3:3] <= (counter7a[3:3] ^ (counter7a[2:2] & cntr_cout[2]));
	// synopsys translate_off
	initial
		counter7a[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter7a[4:4] <= 1'b0;
		else
			if (sclr == 1'b1) counter7a[4:4] <= 1'b0;
			else  counter7a[4:4] <= (counter7a[4:4] ^ cntr_cout[3]);
	// synopsys translate_off
	initial
		parity5 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) parity5 <= 1'b0;
		else
			if (sclr == 1'b1) parity5 <= 1'b0;
			else  parity5 <= ((cnt_en & (sub_parity6a[0] ^ sub_parity6a[1])) | ((~ cnt_en) & parity5));
	// synopsys translate_off
	initial
		sub_parity6a[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity6a[0:0] <= {1{1'b1}};
		else
			if (sclr == 1'b1) sub_parity6a[0:0] <= 1'b0;
			else  sub_parity6a[0:0] <= ((cnt_en & (((counter7a[0] ^ counter7a[1]) ^ counter7a[2]) ^ counter7a[3])) | ((~ cnt_en) & sub_parity6a[0:0]));
	// synopsys translate_off
	initial
		sub_parity6a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity6a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity6a[1:1] <= 1'b0;
			else  sub_parity6a[1:1] <= ((cnt_en & counter7a[4]) | ((~ cnt_en) & sub_parity6a[1:1]));
	assign
		cntr_cout = {1'b0, (cntr_cout[2] & (~ counter7a[2:2])), (cntr_cout[1] & (~ counter7a[1:1])), (cntr_cout[0] & (~ counter7a[0:0])), (cnt_en & parity_cout)},
		parity_cout = ((parity5 ^ (~ updown)) & cnt_en),
		q = counter7a,
		sclr = 1'b0,
		updown = 1'b1;
endmodule //my_fifo_a_graycounter


//a_graycounter DEVICE_FAMILY="Cyclone II" PVALUE=1 WIDTH=5 aclr clock cnt_en q ALTERA_INTERNAL_OPTIONS=suppress_da_rule_internal=s102
//VERSION_BEGIN 13.0 cbx_a_gray2bin 2013:04:24:18:08:47:SJ cbx_a_graycounter 2013:04:24:18:08:47:SJ cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ  VERSION_END

//synthesis_resources = reg 8 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=s102;{-to counter8a[0]} POWER_UP_LEVEL=HIGH"} *)
module  my_fifo_a_graycounter1
	( 
	aclr,
	clock,
	cnt_en,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	counter8a;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=HIGH"} *)
	reg	parity9;
	reg	[1:0]	sub_parity10a;
	wire  [4:0]  cntr_cout;
	wire  parity_cout;
	wire sclr;
	wire updown;

	// synopsys translate_off
	initial
		counter8a[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[0:0] <= {1{1'b1}};
		else
			if (sclr == 1'b1) counter8a[0:0] <= 1'b0;
			else  counter8a[0:0] <= ((cnt_en & (counter8a[0:0] ^ (~ parity_cout))) | ((~ cnt_en) & counter8a[0:0]));
	// synopsys translate_off
	initial
		counter8a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[1:1] <= 1'b0;
			else  counter8a[1:1] <= (counter8a[1:1] ^ (counter8a[0:0] & cntr_cout[0]));
	// synopsys translate_off
	initial
		counter8a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[2:2] <= 1'b0;
			else  counter8a[2:2] <= (counter8a[2:2] ^ (counter8a[1:1] & cntr_cout[1]));
	// synopsys translate_off
	initial
		counter8a[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[3:3] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[3:3] <= 1'b0;
			else  counter8a[3:3] <= (counter8a[3:3] ^ (counter8a[2:2] & cntr_cout[2]));
	// synopsys translate_off
	initial
		counter8a[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter8a[4:4] <= 1'b0;
		else
			if (sclr == 1'b1) counter8a[4:4] <= 1'b0;
			else  counter8a[4:4] <= (counter8a[4:4] ^ cntr_cout[3]);
	// synopsys translate_off
	initial
		parity9 = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) parity9 <= {1{1'b1}};
		else
			if (sclr == 1'b1) parity9 <= 1'b0;
			else  parity9 <= ((cnt_en & (sub_parity10a[0] ^ sub_parity10a[1])) | ((~ cnt_en) & parity9));
	// synopsys translate_off
	initial
		sub_parity10a[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity10a[0:0] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity10a[0:0] <= 1'b0;
			else  sub_parity10a[0:0] <= ((cnt_en & (((counter8a[0] ^ counter8a[1]) ^ counter8a[2]) ^ counter8a[3])) | ((~ cnt_en) & sub_parity10a[0:0]));
	// synopsys translate_off
	initial
		sub_parity10a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity10a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity10a[1:1] <= 1'b0;
			else  sub_parity10a[1:1] <= ((cnt_en & counter8a[4]) | ((~ cnt_en) & sub_parity10a[1:1]));
	assign
		cntr_cout = {1'b0, (cntr_cout[2] & (~ counter8a[2:2])), (cntr_cout[1] & (~ counter8a[1:1])), (cntr_cout[0] & (~ counter8a[0:0])), (cnt_en & parity_cout)},
		parity_cout = (((~ parity9) ^ updown) & cnt_en),
		q = counter8a,
		sclr = 1'b0,
		updown = 1'b1;
endmodule //my_fifo_a_graycounter1


//a_graycounter DEVICE_FAMILY="Cyclone II" PVALUE=0 WIDTH=5 aclr clock cnt_en q ALTERA_INTERNAL_OPTIONS=suppress_da_rule_internal=s102
//VERSION_BEGIN 13.0 cbx_a_gray2bin 2013:04:24:18:08:47:SJ cbx_a_graycounter 2013:04:24:18:08:47:SJ cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ  VERSION_END

//synthesis_resources = reg 8 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=s102;{-to sub_parity12a[0]} POWER_UP_LEVEL=HIGH"} *)
module  my_fifo_a_graycounter12
	( 
	aclr,
	clock,
	cnt_en,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	counter13a;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	parity11;
	reg	[1:0]	sub_parity12a;
	wire  [4:0]  cntr_cout;
	wire  parity_cout;
	wire sclr;
	wire updown;

	// synopsys translate_off
	initial
		counter13a[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter13a[0:0] <= 1'b0;
		else
			if (sclr == 1'b1) counter13a[0:0] <= 1'b0;
			else  counter13a[0:0] <= ((cnt_en & (counter13a[0:0] ^ (~ parity_cout))) | ((~ cnt_en) & counter13a[0:0]));
	// synopsys translate_off
	initial
		counter13a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter13a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) counter13a[1:1] <= 1'b0;
			else  counter13a[1:1] <= (counter13a[1:1] ^ (counter13a[0:0] & cntr_cout[0]));
	// synopsys translate_off
	initial
		counter13a[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter13a[2:2] <= 1'b0;
		else
			if (sclr == 1'b1) counter13a[2:2] <= 1'b0;
			else  counter13a[2:2] <= (counter13a[2:2] ^ (counter13a[1:1] & cntr_cout[1]));
	// synopsys translate_off
	initial
		counter13a[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter13a[3:3] <= 1'b0;
		else
			if (sclr == 1'b1) counter13a[3:3] <= 1'b0;
			else  counter13a[3:3] <= (counter13a[3:3] ^ (counter13a[2:2] & cntr_cout[2]));
	// synopsys translate_off
	initial
		counter13a[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) counter13a[4:4] <= 1'b0;
		else
			if (sclr == 1'b1) counter13a[4:4] <= 1'b0;
			else  counter13a[4:4] <= (counter13a[4:4] ^ cntr_cout[3]);
	// synopsys translate_off
	initial
		parity11 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) parity11 <= 1'b0;
		else
			if (sclr == 1'b1) parity11 <= 1'b0;
			else  parity11 <= ((cnt_en & (sub_parity12a[0] ^ sub_parity12a[1])) | ((~ cnt_en) & parity11));
	// synopsys translate_off
	initial
		sub_parity12a[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity12a[0:0] <= {1{1'b1}};
		else
			if (sclr == 1'b1) sub_parity12a[0:0] <= 1'b0;
			else  sub_parity12a[0:0] <= ((cnt_en & (((counter13a[0] ^ counter13a[1]) ^ counter13a[2]) ^ counter13a[3])) | ((~ cnt_en) & sub_parity12a[0:0]));
	// synopsys translate_off
	initial
		sub_parity12a[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sub_parity12a[1:1] <= 1'b0;
		else
			if (sclr == 1'b1) sub_parity12a[1:1] <= 1'b0;
			else  sub_parity12a[1:1] <= ((cnt_en & counter13a[4]) | ((~ cnt_en) & sub_parity12a[1:1]));
	assign
		cntr_cout = {1'b0, (cntr_cout[2] & (~ counter13a[2:2])), (cntr_cout[1] & (~ counter13a[1:1])), (cntr_cout[0] & (~ counter13a[0:0])), (cnt_en & parity_cout)},
		parity_cout = ((parity11 ^ (~ updown)) & cnt_en),
		q = counter13a,
		sclr = 1'b0,
		updown = 1'b1;
endmodule //my_fifo_a_graycounter12


//altsyncram ADDRESS_REG_B="CLOCK1" CLOCK_ENABLE_INPUT_B="BYPASS" DEVICE_FAMILY="Cyclone II" OPERATION_MODE="DUAL_PORT" OUTDATA_ACLR_B="CLEAR1" OUTDATA_REG_B="CLOCK1" RAM_BLOCK_TYPE="M4K" WIDTH_A=10 WIDTH_B=10 WIDTH_BYTEENA_A=1 WIDTHAD_A=4 WIDTHAD_B=4 aclr1 address_a address_b addressstall_b clock0 clock1 clocken1 data_a q_b wren_a ALTERA_INTERNAL_OPTIONS=suppress_da_rule_internal=r105
//VERSION_BEGIN 13.0 cbx_altsyncram 2013:04:24:18:08:47:SJ cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_lpm_compare 2013:04:24:18:08:47:SJ cbx_lpm_decode 2013:04:24:18:08:47:SJ cbx_lpm_mux 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_stratixiii 2013:04:24:18:08:47:SJ cbx_stratixv 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END

//synthesis_resources = M4K 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=r105;OPTIMIZE_POWER_DURING_SYNTHESIS=NORMAL_COMPILATION"} *)
module  my_fifo_altsyncram
	( 
	aclr1,
	address_a,
	address_b,
	addressstall_b,
	clock0,
	clock1,
	clocken1,
	data_a,
	q_b,
	wren_a) /* synthesis synthesis_clearbox=1 */;
	input   aclr1;
	input   [3:0]  address_a;
	input   [3:0]  address_b;
	input   addressstall_b;
	input   clock0;
	input   clock1;
	input   clocken1;
	input   [9:0]  data_a;
	output   [9:0]  q_b;
	input   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr1;
	tri1   [3:0]  address_b;
	tri0   addressstall_b;
	tri1   clock0;
	tri1   clock1;
	tri1   clocken1;
	tri1   [9:0]  data_a;
	tri0   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_ram_block14a_0portbdataout;
	wire  [0:0]   wire_ram_block14a_1portbdataout;
	wire  [0:0]   wire_ram_block14a_2portbdataout;
	wire  [0:0]   wire_ram_block14a_3portbdataout;
	wire  [0:0]   wire_ram_block14a_4portbdataout;
	wire  [0:0]   wire_ram_block14a_5portbdataout;
	wire  [0:0]   wire_ram_block14a_6portbdataout;
	wire  [0:0]   wire_ram_block14a_7portbdataout;
	wire  [0:0]   wire_ram_block14a_8portbdataout;
	wire  [0:0]   wire_ram_block14a_9portbdataout;
	wire  [3:0]  address_a_wire;
	wire  [3:0]  address_b_wire;

	cycloneii_ram_block   ram_block14a_0
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[3:0]}),
	.portadatain({data_a[0]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[3:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block14a_0portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block14a_0.connectivity_checking = "OFF",
		ram_block14a_0.logical_ram_name = "ALTSYNCRAM",
		ram_block14a_0.mixed_port_feed_through_mode = "dont_care",
		ram_block14a_0.operation_mode = "dual_port",
		ram_block14a_0.port_a_address_width = 4,
		ram_block14a_0.port_a_data_width = 1,
		ram_block14a_0.port_a_disable_ce_on_input_registers = "off",
		ram_block14a_0.port_a_first_address = 0,
		ram_block14a_0.port_a_first_bit_number = 0,
		ram_block14a_0.port_a_last_address = 15,
		ram_block14a_0.port_a_logical_ram_depth = 16,
		ram_block14a_0.port_a_logical_ram_width = 10,
		ram_block14a_0.port_b_address_clock = "clock1",
		ram_block14a_0.port_b_address_width = 4,
		ram_block14a_0.port_b_data_out_clear = "clear1",
		ram_block14a_0.port_b_data_out_clock = "clock1",
		ram_block14a_0.port_b_data_width = 1,
		ram_block14a_0.port_b_disable_ce_on_input_registers = "on",
		ram_block14a_0.port_b_disable_ce_on_output_registers = "off",
		ram_block14a_0.port_b_first_address = 0,
		ram_block14a_0.port_b_first_bit_number = 0,
		ram_block14a_0.port_b_last_address = 15,
		ram_block14a_0.port_b_logical_ram_depth = 16,
		ram_block14a_0.port_b_logical_ram_width = 10,
		ram_block14a_0.port_b_read_enable_write_enable_clock = "clock1",
		ram_block14a_0.ram_block_type = "M4K",
		ram_block14a_0.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block14a_1
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[3:0]}),
	.portadatain({data_a[1]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[3:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block14a_1portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block14a_1.connectivity_checking = "OFF",
		ram_block14a_1.logical_ram_name = "ALTSYNCRAM",
		ram_block14a_1.mixed_port_feed_through_mode = "dont_care",
		ram_block14a_1.operation_mode = "dual_port",
		ram_block14a_1.port_a_address_width = 4,
		ram_block14a_1.port_a_data_width = 1,
		ram_block14a_1.port_a_disable_ce_on_input_registers = "off",
		ram_block14a_1.port_a_first_address = 0,
		ram_block14a_1.port_a_first_bit_number = 1,
		ram_block14a_1.port_a_last_address = 15,
		ram_block14a_1.port_a_logical_ram_depth = 16,
		ram_block14a_1.port_a_logical_ram_width = 10,
		ram_block14a_1.port_b_address_clock = "clock1",
		ram_block14a_1.port_b_address_width = 4,
		ram_block14a_1.port_b_data_out_clear = "clear1",
		ram_block14a_1.port_b_data_out_clock = "clock1",
		ram_block14a_1.port_b_data_width = 1,
		ram_block14a_1.port_b_disable_ce_on_input_registers = "on",
		ram_block14a_1.port_b_disable_ce_on_output_registers = "off",
		ram_block14a_1.port_b_first_address = 0,
		ram_block14a_1.port_b_first_bit_number = 1,
		ram_block14a_1.port_b_last_address = 15,
		ram_block14a_1.port_b_logical_ram_depth = 16,
		ram_block14a_1.port_b_logical_ram_width = 10,
		ram_block14a_1.port_b_read_enable_write_enable_clock = "clock1",
		ram_block14a_1.ram_block_type = "M4K",
		ram_block14a_1.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block14a_2
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[3:0]}),
	.portadatain({data_a[2]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[3:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block14a_2portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block14a_2.connectivity_checking = "OFF",
		ram_block14a_2.logical_ram_name = "ALTSYNCRAM",
		ram_block14a_2.mixed_port_feed_through_mode = "dont_care",
		ram_block14a_2.operation_mode = "dual_port",
		ram_block14a_2.port_a_address_width = 4,
		ram_block14a_2.port_a_data_width = 1,
		ram_block14a_2.port_a_disable_ce_on_input_registers = "off",
		ram_block14a_2.port_a_first_address = 0,
		ram_block14a_2.port_a_first_bit_number = 2,
		ram_block14a_2.port_a_last_address = 15,
		ram_block14a_2.port_a_logical_ram_depth = 16,
		ram_block14a_2.port_a_logical_ram_width = 10,
		ram_block14a_2.port_b_address_clock = "clock1",
		ram_block14a_2.port_b_address_width = 4,
		ram_block14a_2.port_b_data_out_clear = "clear1",
		ram_block14a_2.port_b_data_out_clock = "clock1",
		ram_block14a_2.port_b_data_width = 1,
		ram_block14a_2.port_b_disable_ce_on_input_registers = "on",
		ram_block14a_2.port_b_disable_ce_on_output_registers = "off",
		ram_block14a_2.port_b_first_address = 0,
		ram_block14a_2.port_b_first_bit_number = 2,
		ram_block14a_2.port_b_last_address = 15,
		ram_block14a_2.port_b_logical_ram_depth = 16,
		ram_block14a_2.port_b_logical_ram_width = 10,
		ram_block14a_2.port_b_read_enable_write_enable_clock = "clock1",
		ram_block14a_2.ram_block_type = "M4K",
		ram_block14a_2.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block14a_3
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[3:0]}),
	.portadatain({data_a[3]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[3:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block14a_3portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block14a_3.connectivity_checking = "OFF",
		ram_block14a_3.logical_ram_name = "ALTSYNCRAM",
		ram_block14a_3.mixed_port_feed_through_mode = "dont_care",
		ram_block14a_3.operation_mode = "dual_port",
		ram_block14a_3.port_a_address_width = 4,
		ram_block14a_3.port_a_data_width = 1,
		ram_block14a_3.port_a_disable_ce_on_input_registers = "off",
		ram_block14a_3.port_a_first_address = 0,
		ram_block14a_3.port_a_first_bit_number = 3,
		ram_block14a_3.port_a_last_address = 15,
		ram_block14a_3.port_a_logical_ram_depth = 16,
		ram_block14a_3.port_a_logical_ram_width = 10,
		ram_block14a_3.port_b_address_clock = "clock1",
		ram_block14a_3.port_b_address_width = 4,
		ram_block14a_3.port_b_data_out_clear = "clear1",
		ram_block14a_3.port_b_data_out_clock = "clock1",
		ram_block14a_3.port_b_data_width = 1,
		ram_block14a_3.port_b_disable_ce_on_input_registers = "on",
		ram_block14a_3.port_b_disable_ce_on_output_registers = "off",
		ram_block14a_3.port_b_first_address = 0,
		ram_block14a_3.port_b_first_bit_number = 3,
		ram_block14a_3.port_b_last_address = 15,
		ram_block14a_3.port_b_logical_ram_depth = 16,
		ram_block14a_3.port_b_logical_ram_width = 10,
		ram_block14a_3.port_b_read_enable_write_enable_clock = "clock1",
		ram_block14a_3.ram_block_type = "M4K",
		ram_block14a_3.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block14a_4
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[3:0]}),
	.portadatain({data_a[4]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[3:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block14a_4portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block14a_4.connectivity_checking = "OFF",
		ram_block14a_4.logical_ram_name = "ALTSYNCRAM",
		ram_block14a_4.mixed_port_feed_through_mode = "dont_care",
		ram_block14a_4.operation_mode = "dual_port",
		ram_block14a_4.port_a_address_width = 4,
		ram_block14a_4.port_a_data_width = 1,
		ram_block14a_4.port_a_disable_ce_on_input_registers = "off",
		ram_block14a_4.port_a_first_address = 0,
		ram_block14a_4.port_a_first_bit_number = 4,
		ram_block14a_4.port_a_last_address = 15,
		ram_block14a_4.port_a_logical_ram_depth = 16,
		ram_block14a_4.port_a_logical_ram_width = 10,
		ram_block14a_4.port_b_address_clock = "clock1",
		ram_block14a_4.port_b_address_width = 4,
		ram_block14a_4.port_b_data_out_clear = "clear1",
		ram_block14a_4.port_b_data_out_clock = "clock1",
		ram_block14a_4.port_b_data_width = 1,
		ram_block14a_4.port_b_disable_ce_on_input_registers = "on",
		ram_block14a_4.port_b_disable_ce_on_output_registers = "off",
		ram_block14a_4.port_b_first_address = 0,
		ram_block14a_4.port_b_first_bit_number = 4,
		ram_block14a_4.port_b_last_address = 15,
		ram_block14a_4.port_b_logical_ram_depth = 16,
		ram_block14a_4.port_b_logical_ram_width = 10,
		ram_block14a_4.port_b_read_enable_write_enable_clock = "clock1",
		ram_block14a_4.ram_block_type = "M4K",
		ram_block14a_4.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block14a_5
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[3:0]}),
	.portadatain({data_a[5]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[3:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block14a_5portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block14a_5.connectivity_checking = "OFF",
		ram_block14a_5.logical_ram_name = "ALTSYNCRAM",
		ram_block14a_5.mixed_port_feed_through_mode = "dont_care",
		ram_block14a_5.operation_mode = "dual_port",
		ram_block14a_5.port_a_address_width = 4,
		ram_block14a_5.port_a_data_width = 1,
		ram_block14a_5.port_a_disable_ce_on_input_registers = "off",
		ram_block14a_5.port_a_first_address = 0,
		ram_block14a_5.port_a_first_bit_number = 5,
		ram_block14a_5.port_a_last_address = 15,
		ram_block14a_5.port_a_logical_ram_depth = 16,
		ram_block14a_5.port_a_logical_ram_width = 10,
		ram_block14a_5.port_b_address_clock = "clock1",
		ram_block14a_5.port_b_address_width = 4,
		ram_block14a_5.port_b_data_out_clear = "clear1",
		ram_block14a_5.port_b_data_out_clock = "clock1",
		ram_block14a_5.port_b_data_width = 1,
		ram_block14a_5.port_b_disable_ce_on_input_registers = "on",
		ram_block14a_5.port_b_disable_ce_on_output_registers = "off",
		ram_block14a_5.port_b_first_address = 0,
		ram_block14a_5.port_b_first_bit_number = 5,
		ram_block14a_5.port_b_last_address = 15,
		ram_block14a_5.port_b_logical_ram_depth = 16,
		ram_block14a_5.port_b_logical_ram_width = 10,
		ram_block14a_5.port_b_read_enable_write_enable_clock = "clock1",
		ram_block14a_5.ram_block_type = "M4K",
		ram_block14a_5.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block14a_6
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[3:0]}),
	.portadatain({data_a[6]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[3:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block14a_6portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block14a_6.connectivity_checking = "OFF",
		ram_block14a_6.logical_ram_name = "ALTSYNCRAM",
		ram_block14a_6.mixed_port_feed_through_mode = "dont_care",
		ram_block14a_6.operation_mode = "dual_port",
		ram_block14a_6.port_a_address_width = 4,
		ram_block14a_6.port_a_data_width = 1,
		ram_block14a_6.port_a_disable_ce_on_input_registers = "off",
		ram_block14a_6.port_a_first_address = 0,
		ram_block14a_6.port_a_first_bit_number = 6,
		ram_block14a_6.port_a_last_address = 15,
		ram_block14a_6.port_a_logical_ram_depth = 16,
		ram_block14a_6.port_a_logical_ram_width = 10,
		ram_block14a_6.port_b_address_clock = "clock1",
		ram_block14a_6.port_b_address_width = 4,
		ram_block14a_6.port_b_data_out_clear = "clear1",
		ram_block14a_6.port_b_data_out_clock = "clock1",
		ram_block14a_6.port_b_data_width = 1,
		ram_block14a_6.port_b_disable_ce_on_input_registers = "on",
		ram_block14a_6.port_b_disable_ce_on_output_registers = "off",
		ram_block14a_6.port_b_first_address = 0,
		ram_block14a_6.port_b_first_bit_number = 6,
		ram_block14a_6.port_b_last_address = 15,
		ram_block14a_6.port_b_logical_ram_depth = 16,
		ram_block14a_6.port_b_logical_ram_width = 10,
		ram_block14a_6.port_b_read_enable_write_enable_clock = "clock1",
		ram_block14a_6.ram_block_type = "M4K",
		ram_block14a_6.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block14a_7
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[3:0]}),
	.portadatain({data_a[7]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[3:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block14a_7portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block14a_7.connectivity_checking = "OFF",
		ram_block14a_7.logical_ram_name = "ALTSYNCRAM",
		ram_block14a_7.mixed_port_feed_through_mode = "dont_care",
		ram_block14a_7.operation_mode = "dual_port",
		ram_block14a_7.port_a_address_width = 4,
		ram_block14a_7.port_a_data_width = 1,
		ram_block14a_7.port_a_disable_ce_on_input_registers = "off",
		ram_block14a_7.port_a_first_address = 0,
		ram_block14a_7.port_a_first_bit_number = 7,
		ram_block14a_7.port_a_last_address = 15,
		ram_block14a_7.port_a_logical_ram_depth = 16,
		ram_block14a_7.port_a_logical_ram_width = 10,
		ram_block14a_7.port_b_address_clock = "clock1",
		ram_block14a_7.port_b_address_width = 4,
		ram_block14a_7.port_b_data_out_clear = "clear1",
		ram_block14a_7.port_b_data_out_clock = "clock1",
		ram_block14a_7.port_b_data_width = 1,
		ram_block14a_7.port_b_disable_ce_on_input_registers = "on",
		ram_block14a_7.port_b_disable_ce_on_output_registers = "off",
		ram_block14a_7.port_b_first_address = 0,
		ram_block14a_7.port_b_first_bit_number = 7,
		ram_block14a_7.port_b_last_address = 15,
		ram_block14a_7.port_b_logical_ram_depth = 16,
		ram_block14a_7.port_b_logical_ram_width = 10,
		ram_block14a_7.port_b_read_enable_write_enable_clock = "clock1",
		ram_block14a_7.ram_block_type = "M4K",
		ram_block14a_7.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block14a_8
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[3:0]}),
	.portadatain({data_a[8]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[3:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block14a_8portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block14a_8.connectivity_checking = "OFF",
		ram_block14a_8.logical_ram_name = "ALTSYNCRAM",
		ram_block14a_8.mixed_port_feed_through_mode = "dont_care",
		ram_block14a_8.operation_mode = "dual_port",
		ram_block14a_8.port_a_address_width = 4,
		ram_block14a_8.port_a_data_width = 1,
		ram_block14a_8.port_a_disable_ce_on_input_registers = "off",
		ram_block14a_8.port_a_first_address = 0,
		ram_block14a_8.port_a_first_bit_number = 8,
		ram_block14a_8.port_a_last_address = 15,
		ram_block14a_8.port_a_logical_ram_depth = 16,
		ram_block14a_8.port_a_logical_ram_width = 10,
		ram_block14a_8.port_b_address_clock = "clock1",
		ram_block14a_8.port_b_address_width = 4,
		ram_block14a_8.port_b_data_out_clear = "clear1",
		ram_block14a_8.port_b_data_out_clock = "clock1",
		ram_block14a_8.port_b_data_width = 1,
		ram_block14a_8.port_b_disable_ce_on_input_registers = "on",
		ram_block14a_8.port_b_disable_ce_on_output_registers = "off",
		ram_block14a_8.port_b_first_address = 0,
		ram_block14a_8.port_b_first_bit_number = 8,
		ram_block14a_8.port_b_last_address = 15,
		ram_block14a_8.port_b_logical_ram_depth = 16,
		ram_block14a_8.port_b_logical_ram_width = 10,
		ram_block14a_8.port_b_read_enable_write_enable_clock = "clock1",
		ram_block14a_8.ram_block_type = "M4K",
		ram_block14a_8.lpm_type = "cycloneii_ram_block";
	cycloneii_ram_block   ram_block14a_9
	( 
	.clk0(clock0),
	.clk1(clock1),
	.clr1(aclr1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[3:0]}),
	.portadatain({data_a[9]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[3:0]}),
	.portbaddrstall(addressstall_b),
	.portbdataout(wire_ram_block14a_9portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.portaaddrstall(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block14a_9.connectivity_checking = "OFF",
		ram_block14a_9.logical_ram_name = "ALTSYNCRAM",
		ram_block14a_9.mixed_port_feed_through_mode = "dont_care",
		ram_block14a_9.operation_mode = "dual_port",
		ram_block14a_9.port_a_address_width = 4,
		ram_block14a_9.port_a_data_width = 1,
		ram_block14a_9.port_a_disable_ce_on_input_registers = "off",
		ram_block14a_9.port_a_first_address = 0,
		ram_block14a_9.port_a_first_bit_number = 9,
		ram_block14a_9.port_a_last_address = 15,
		ram_block14a_9.port_a_logical_ram_depth = 16,
		ram_block14a_9.port_a_logical_ram_width = 10,
		ram_block14a_9.port_b_address_clock = "clock1",
		ram_block14a_9.port_b_address_width = 4,
		ram_block14a_9.port_b_data_out_clear = "clear1",
		ram_block14a_9.port_b_data_out_clock = "clock1",
		ram_block14a_9.port_b_data_width = 1,
		ram_block14a_9.port_b_disable_ce_on_input_registers = "on",
		ram_block14a_9.port_b_disable_ce_on_output_registers = "off",
		ram_block14a_9.port_b_first_address = 0,
		ram_block14a_9.port_b_first_bit_number = 9,
		ram_block14a_9.port_b_last_address = 15,
		ram_block14a_9.port_b_logical_ram_depth = 16,
		ram_block14a_9.port_b_logical_ram_width = 10,
		ram_block14a_9.port_b_read_enable_write_enable_clock = "clock1",
		ram_block14a_9.ram_block_type = "M4K",
		ram_block14a_9.lpm_type = "cycloneii_ram_block";
	assign
		address_a_wire = address_a,
		address_b_wire = address_b,
		q_b = {wire_ram_block14a_9portbdataout[0], wire_ram_block14a_8portbdataout[0], wire_ram_block14a_7portbdataout[0], wire_ram_block14a_6portbdataout[0], wire_ram_block14a_5portbdataout[0], wire_ram_block14a_4portbdataout[0], wire_ram_block14a_3portbdataout[0], wire_ram_block14a_2portbdataout[0], wire_ram_block14a_1portbdataout[0], wire_ram_block14a_0portbdataout[0]};
endmodule //my_fifo_altsyncram


//dffpipe DELAY=1 WIDTH=1 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF;PRESERVE_REGISTER=ON;suppress_da_rule_internal=c106;suppress_da_rule_internal=r105
//VERSION_BEGIN 13.0 cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END

//synthesis_resources = reg 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF;PRESERVE_REGISTER=ON;suppress_da_rule_internal=c106;suppress_da_rule_internal=r105"} *)
module  my_fifo_dffpipe
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [0:0]  d;
	output   [0:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[0:0]	dffe15a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe15a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe15a <= {1{1'b1}};
		else if (clrn == 1'b0) dffe15a <= 1'b0;
		else if  (ena == 1'b1)   dffe15a <= (d & (~ sclr));
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe15a,
		sclr = 1'b0;
endmodule //my_fifo_dffpipe


//dffpipe DELAY=1 WIDTH=5 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF;suppress_da_rule_internal=r105
//VERSION_BEGIN 13.0 cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END

//synthesis_resources = reg 5 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF;suppress_da_rule_internal=r105"} *)
module  my_fifo_dffpipe1
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [4:0]  d;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	dffe16a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe16a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe16a <= {5{1'b1}};
		else if (clrn == 1'b0) dffe16a <= 5'b0;
		else if  (ena == 1'b1)   dffe16a <= (d & {5{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe16a,
		sclr = 1'b0;
endmodule //my_fifo_dffpipe1


//dffpipe DELAY=2 WIDTH=5 clock clrn d q ALTERA_INTERNAL_OPTIONS=X_ON_VIOLATION_OPTION=OFF;suppress_da_rule_internal=r105
//VERSION_BEGIN 13.0 cbx_a_gray2bin 2013:04:24:18:08:47:SJ cbx_a_graycounter 2013:04:24:18:08:47:SJ cbx_altdpram 2013:04:24:18:08:47:SJ cbx_altsyncram 2013:04:24:18:08:47:SJ cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_dcfifo 2013:04:24:18:08:47:SJ cbx_fifo_common 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_lpm_compare 2013:04:24:18:08:47:SJ cbx_lpm_counter 2013:04:24:18:08:47:SJ cbx_lpm_decode 2013:04:24:18:08:47:SJ cbx_lpm_mux 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_scfifo 2013:04:24:18:08:47:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_stratixiii 2013:04:24:18:08:47:SJ cbx_stratixv 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END


//dffpipe DELAY=2 WIDTH=5 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 13.0 cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END

//synthesis_resources = reg 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  my_fifo_dffpipe12
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [4:0]  d;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	dffe18a;
	reg	[4:0]	dffe19a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe18a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe18a <= {5{1'b1}};
		else if (clrn == 1'b0) dffe18a <= 5'b0;
		else if  (ena == 1'b1)   dffe18a <= (d & {5{(~ sclr)}});
	// synopsys translate_off
	initial
		dffe19a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe19a <= {5{1'b1}};
		else if (clrn == 1'b0) dffe19a <= 5'b0;
		else if  (ena == 1'b1)   dffe19a <= (dffe18a & {5{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe19a,
		sclr = 1'b0;
endmodule //my_fifo_dffpipe12

//synthesis_resources = reg 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"X_ON_VIOLATION_OPTION=OFF;suppress_da_rule_internal=r105"} *)
module  my_fifo_alt_synch_pipe
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [4:0]  d;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [4:0]   wire_dffpipe17_q;

	my_fifo_dffpipe12   dffpipe17
	( 
	.clock(clock),
	.clrn(clrn),
	.d(d),
	.q(wire_dffpipe17_q));
	assign
		q = wire_dffpipe17_q;
endmodule //my_fifo_alt_synch_pipe


//dffpipe DELAY=1 WIDTH=5 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 13.0 cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END

//synthesis_resources = reg 5 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  my_fifo_dffpipe123
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [4:0]  d;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	dffe20a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe20a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe20a <= {5{1'b1}};
		else if (clrn == 1'b0) dffe20a <= 5'b0;
		else if  (ena == 1'b1)   dffe20a <= (d & {5{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe20a,
		sclr = 1'b0;
endmodule //my_fifo_dffpipe123


//dffpipe DELAY=2 WIDTH=5 clock clrn d q ALTERA_INTERNAL_OPTIONS=X_ON_VIOLATION_OPTION=OFF
//VERSION_BEGIN 13.0 cbx_a_gray2bin 2013:04:24:18:08:47:SJ cbx_a_graycounter 2013:04:24:18:08:47:SJ cbx_altdpram 2013:04:24:18:08:47:SJ cbx_altsyncram 2013:04:24:18:08:47:SJ cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_dcfifo 2013:04:24:18:08:47:SJ cbx_fifo_common 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_lpm_compare 2013:04:24:18:08:47:SJ cbx_lpm_counter 2013:04:24:18:08:47:SJ cbx_lpm_decode 2013:04:24:18:08:47:SJ cbx_lpm_mux 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_scfifo 2013:04:24:18:08:47:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_stratixiii 2013:04:24:18:08:47:SJ cbx_stratixv 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END


//dffpipe DELAY=2 WIDTH=5 clock clrn d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 13.0 cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratixii 2013:04:24:18:08:47:SJ cbx_util_mgl 2013:04:24:18:08:47:SJ  VERSION_END

//synthesis_resources = reg 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  my_fifo_dffpipe1234
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [4:0]  d;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   clock;
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[4:0]	dffe22a;
	reg	[4:0]	dffe23a;
	wire ena;
	wire prn;
	wire sclr;

	// synopsys translate_off
	initial
		dffe22a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe22a <= {5{1'b1}};
		else if (clrn == 1'b0) dffe22a <= 5'b0;
		else if  (ena == 1'b1)   dffe22a <= (d & {5{(~ sclr)}});
	// synopsys translate_off
	initial
		dffe23a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  negedge prn or  negedge clrn)
		if (prn == 1'b0) dffe23a <= {5{1'b1}};
		else if (clrn == 1'b0) dffe23a <= 5'b0;
		else if  (ena == 1'b1)   dffe23a <= (dffe22a & {5{(~ sclr)}});
	assign
		ena = 1'b1,
		prn = 1'b1,
		q = dffe23a,
		sclr = 1'b0;
endmodule //my_fifo_dffpipe1234

//synthesis_resources = reg 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"X_ON_VIOLATION_OPTION=OFF"} *)
module  my_fifo_alt_synch_pipe1
	( 
	clock,
	clrn,
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   clock;
	input   clrn;
	input   [4:0]  d;
	output   [4:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clrn;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [4:0]   wire_dffpipe21_q;

	my_fifo_dffpipe1234   dffpipe21
	( 
	.clock(clock),
	.clrn(clrn),
	.d(d),
	.q(wire_dffpipe21_q));
	assign
		q = wire_dffpipe21_q;
endmodule //my_fifo_alt_synch_pipe1


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=5 dataa datab result
//VERSION_BEGIN 13.0 cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone II" LPM_DIRECTION="SUB" LPM_WIDTH=5 dataa datab result
//VERSION_BEGIN 13.0 cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ  VERSION_END


//lpm_compare DEVICE_FAMILY="Cyclone II" LPM_WIDTH=5 aeb dataa datab
//VERSION_BEGIN 13.0 cbx_cycloneii 2013:04:24:18:08:47:SJ cbx_lpm_add_sub 2013:04:24:18:08:47:SJ cbx_lpm_compare 2013:04:24:18:08:47:SJ cbx_mgl 2013:04:24:18:11:10:SJ cbx_stratix 2013:04:24:18:08:47:SJ cbx_stratixii 2013:04:24:18:08:47:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  my_fifo_cmpr
	( 
	aeb,
	dataa,
	datab) /* synthesis synthesis_clearbox=1 */;
	output   aeb;
	input   [4:0]  dataa;
	input   [4:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [4:0]  dataa;
	tri0   [4:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]  aeb_result_wire;
	wire  [0:0]  aneb_result_wire;
	wire  [12:0]  data_wire;
	wire  eq_wire;

	assign
		aeb = eq_wire,
		aeb_result_wire = (~ aneb_result_wire),
		aneb_result_wire = ((data_wire[0] | data_wire[1]) | data_wire[2]),
		data_wire = {datab[4], dataa[4], datab[3], dataa[3], datab[2], dataa[2], datab[1], dataa[1], datab[0], dataa[0], (data_wire[11] ^ data_wire[12]), ((data_wire[7] ^ data_wire[8]) | (data_wire[9] ^ data_wire[10])), ((data_wire[3] ^ data_wire[4]) | (data_wire[5] ^ data_wire[6]))},
		eq_wire = aeb_result_wire;
endmodule //my_fifo_cmpr

//synthesis_resources = lut 12 M4K 1 reg 76 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=s102;-name CUT ON -from rdptr_g -to ws_dgrp|my_fifo_dffpipe1234:dffpipe21|dffe22a;-name SDC_STATEMENT \"set_false_path -from *rdptr_g* -to *ws_dgrp|my_fifo_dffpipe1234:dffpipe21|dffe22a* \";-name CUT ON -from delayed_wrptr_g -to rs_dgwp|my_fifo_dffpipe12:dffpipe17|dffe18a;-name SDC_STATEMENT \"set_false_path -from *delayed_wrptr_g* -to *rs_dgwp|my_fifo_dffpipe12:dffpipe17|dffe18a* \""} *)
module  my_fifo_dcfifo
	( 
	aclr,
	data,
	q,
	rdclk,
	rdempty,
	rdfull,
	rdreq,
	rdusedw,
	wrclk,
	wrfull,
	wrreq,
	wrusedw) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   [9:0]  data;
	output   [9:0]  q;
	input   rdclk;
	output   rdempty;
	output   rdfull;
	input   rdreq;
	output   [3:0]  rdusedw;
	input   wrclk;
	output   wrfull;
	input   wrreq;
	output   [3:0]  wrusedw;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [4:0]   wire_rdptr_g_gray2bin_bin;
	wire  [4:0]   wire_rs_dgwp_gray2bin_bin;
	wire  [4:0]   wire_wrptr_g_gray2bin_bin;
	wire  [4:0]   wire_ws_dgrp_gray2bin_bin;
	wire  [4:0]   wire_rdptr_g1p_q;
	wire  [4:0]   wire_wrptr_g1p_q;
	wire  [4:0]   wire_wrptr_gp_q;
	wire  [9:0]   wire_fifo_ram_q_b;
	reg	[4:0]	delayed_wrptr_g;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	p0addr;
	(* ALTERA_ATTRIBUTE = {"suppress_da_rule_internal=r105"} *)
	reg	[4:0]	rdptr_g;
	wire  [0:0]   wire_rdaclr_q;
	wire  [4:0]   wire_rs_brp_q;
	wire  [4:0]   wire_rs_bwp_q;
	wire  [4:0]   wire_rs_dgwp_q;
	wire  [4:0]   wire_ws_brp_q;
	wire  [4:0]   wire_ws_bwp_q;
	wire  [4:0]   wire_ws_dgrp_q;
	wire	[4:0]	wire_rdusedw_sub_dataa;
	wire	[4:0]	wire_rdusedw_sub_datab;
	wire	[4:0]	wire_rdusedw_sub_result;
	wire	[4:0]	wire_wrusedw_sub_dataa;
	wire	[4:0]	wire_wrusedw_sub_datab;
	wire	[4:0]	wire_wrusedw_sub_result;
	wire  wire_rdempty_eq_comp_aeb;
	wire  wire_rdfull_eq_comp_aeb;
	wire  wire_wrfull_eq_comp_aeb;
	wire  int_rdempty;
	wire  int_rdfull;
	wire  int_wrfull;
	wire  [3:0]  ram_address_a;
	wire  [3:0]  ram_address_b;
	wire  rdcnt_addr_ena;
	wire  [4:0]  rdptr_gs;
	wire  valid_rdreq;
	wire  valid_wrreq;
	wire  [4:0]  wrptr_gs;

	my_fifo_a_gray2bin   rdptr_g_gray2bin
	( 
	.bin(wire_rdptr_g_gray2bin_bin),
	.gray(rdptr_g[4:0]));
	my_fifo_a_gray2bin   rs_dgwp_gray2bin
	( 
	.bin(wire_rs_dgwp_gray2bin_bin),
	.gray(wire_rs_dgwp_q[4:0]));
	my_fifo_a_gray2bin   wrptr_g_gray2bin
	( 
	.bin(wire_wrptr_g_gray2bin_bin),
	.gray(wire_wrptr_gp_q[4:0]));
	my_fifo_a_gray2bin   ws_dgrp_gray2bin
	( 
	.bin(wire_ws_dgrp_gray2bin_bin),
	.gray(wire_ws_dgrp_q[4:0]));
	my_fifo_a_graycounter   rdptr_g1p
	( 
	.aclr((~ wire_rdaclr_q)),
	.clock(rdclk),
	.cnt_en(rdcnt_addr_ena),
	.q(wire_rdptr_g1p_q));
	my_fifo_a_graycounter1   wrptr_g1p
	( 
	.aclr(aclr),
	.clock(wrclk),
	.cnt_en(valid_wrreq),
	.q(wire_wrptr_g1p_q));
	my_fifo_a_graycounter12   wrptr_gp
	( 
	.aclr(aclr),
	.clock(wrclk),
	.cnt_en(valid_wrreq),
	.q(wire_wrptr_gp_q));
	my_fifo_altsyncram   fifo_ram
	( 
	.aclr1(aclr),
	.address_a(ram_address_a),
	.address_b(ram_address_b),
	.addressstall_b((~ rdcnt_addr_ena)),
	.clock0(wrclk),
	.clock1(rdclk),
	.clocken1(valid_rdreq),
	.data_a(data),
	.q_b(wire_fifo_ram_q_b),
	.wren_a(valid_wrreq));
	// synopsys translate_off
	initial
		delayed_wrptr_g = 0;
	// synopsys translate_on
	always @ ( posedge wrclk or  posedge aclr)
		if (aclr == 1'b1) delayed_wrptr_g <= 5'b0;
		else  delayed_wrptr_g <= wire_wrptr_gp_q;
	// synopsys translate_off
	initial
		p0addr = 0;
	// synopsys translate_on
	always @ ( posedge rdclk or  negedge wire_rdaclr_q)
		if (wire_rdaclr_q == 1'b0) p0addr <= 1'b0;
		else  p0addr <= 1'b1;
	// synopsys translate_off
	initial
		rdptr_g = 0;
	// synopsys translate_on
	always @ ( posedge rdclk or  posedge aclr)
		if (aclr == 1'b1) rdptr_g <= 5'b0;
		else if  (valid_rdreq == 1'b1)   rdptr_g <= wire_rdptr_g1p_q;
	my_fifo_dffpipe   rdaclr
	( 
	.clock((~ rdclk)),
	.clrn((~ aclr)),
	.d(1'b1),
	.q(wire_rdaclr_q));
	my_fifo_dffpipe1   rs_brp
	( 
	.clock(rdclk),
	.clrn((~ aclr)),
	.d(wire_rdptr_g_gray2bin_bin),
	.q(wire_rs_brp_q));
	my_fifo_dffpipe1   rs_bwp
	( 
	.clock(rdclk),
	.clrn((~ aclr)),
	.d(wire_rs_dgwp_gray2bin_bin),
	.q(wire_rs_bwp_q));
	my_fifo_alt_synch_pipe   rs_dgwp
	( 
	.clock(rdclk),
	.clrn((~ aclr)),
	.d(delayed_wrptr_g),
	.q(wire_rs_dgwp_q));
	my_fifo_dffpipe123   ws_brp
	( 
	.clock(wrclk),
	.clrn((~ aclr)),
	.d(wire_ws_dgrp_gray2bin_bin),
	.q(wire_ws_brp_q));
	my_fifo_dffpipe123   ws_bwp
	( 
	.clock(wrclk),
	.clrn((~ aclr)),
	.d(wire_wrptr_g_gray2bin_bin),
	.q(wire_ws_bwp_q));
	my_fifo_alt_synch_pipe1   ws_dgrp
	( 
	.clock(wrclk),
	.clrn((~ aclr)),
	.d(rdptr_g),
	.q(wire_ws_dgrp_q));
	assign
		wire_rdusedw_sub_result = wire_rdusedw_sub_dataa - wire_rdusedw_sub_datab;
	assign
		wire_rdusedw_sub_dataa = wire_rs_bwp_q,
		wire_rdusedw_sub_datab = wire_rs_brp_q;
	assign
		wire_wrusedw_sub_result = wire_wrusedw_sub_dataa - wire_wrusedw_sub_datab;
	assign
		wire_wrusedw_sub_dataa = wire_ws_bwp_q,
		wire_wrusedw_sub_datab = wire_ws_brp_q;
	my_fifo_cmpr   rdempty_eq_comp
	( 
	.aeb(wire_rdempty_eq_comp_aeb),
	.dataa(wire_rs_dgwp_q),
	.datab(rdptr_g));
	my_fifo_cmpr   rdfull_eq_comp
	( 
	.aeb(wire_rdfull_eq_comp_aeb),
	.dataa(wire_rs_dgwp_q),
	.datab(rdptr_gs));
	my_fifo_cmpr   wrfull_eq_comp
	( 
	.aeb(wire_wrfull_eq_comp_aeb),
	.dataa(wire_ws_dgrp_q),
	.datab(wrptr_gs));
	assign
		int_rdempty = wire_rdempty_eq_comp_aeb,
		int_rdfull = wire_rdfull_eq_comp_aeb,
		int_wrfull = wire_wrfull_eq_comp_aeb,
		q = wire_fifo_ram_q_b,
		ram_address_a = {(wire_wrptr_gp_q[4] ^ wire_wrptr_gp_q[3]), wire_wrptr_gp_q[2:0]},
		ram_address_b = {(wire_rdptr_g1p_q[4] ^ wire_rdptr_g1p_q[3]), wire_rdptr_g1p_q[2:0]},
		rdcnt_addr_ena = (valid_rdreq | (~ p0addr)),
		rdempty = int_rdempty,
		rdfull = int_rdfull,
		rdptr_gs = {(~ rdptr_g[4]), (~ rdptr_g[3]), rdptr_g[2:0]},
		rdusedw = {wire_rdusedw_sub_result[3:0]},
		valid_rdreq = (rdreq & (~ int_rdempty)),
		valid_wrreq = (wrreq & (~ int_wrfull)),
		wrfull = int_wrfull,
		wrptr_gs = {(~ wire_wrptr_gp_q[4]), (~ wire_wrptr_gp_q[3]), wire_wrptr_gp_q[2:0]},
		wrusedw = {wire_wrusedw_sub_result[3:0]};
endmodule //my_fifo_dcfifo
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module my_fifo (
	aclr,
	data,
	rdclk,
	rdreq,
	wrclk,
	wrreq,
	q,
	rdempty,
	rdfull,
	rdusedw,
	wrfull,
	wrusedw)/* synthesis synthesis_clearbox = 1 */;

	input	  aclr;
	input	[9:0]  data;
	input	  rdclk;
	input	  rdreq;
	input	  wrclk;
	input	  wrreq;
	output	[9:0]  q;
	output	  rdempty;
	output	  rdfull;
	output	[3:0]  rdusedw;
	output	  wrfull;
	output	[3:0]  wrusedw;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0	  aclr;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  sub_wire0;
	wire [9:0] sub_wire1;
	wire  sub_wire2;
	wire  sub_wire3;
	wire [3:0] sub_wire4;
	wire [3:0] sub_wire5;
	wire  wrfull = sub_wire0;
	wire [9:0] q = sub_wire1[9:0];
	wire  rdempty = sub_wire2;
	wire  rdfull = sub_wire3;
	wire [3:0] wrusedw = sub_wire4[3:0];
	wire [3:0] rdusedw = sub_wire5[3:0];

	my_fifo_dcfifo	my_fifo_dcfifo_component (
				.rdclk (rdclk),
				.wrclk (wrclk),
				.wrreq (wrreq),
				.aclr (aclr),
				.data (data),
				.rdreq (rdreq),
				.wrfull (sub_wire0),
				.q (sub_wire1),
				.rdempty (sub_wire2),
				.rdfull (sub_wire3),
				.wrusedw (sub_wire4),
				.rdusedw (sub_wire5));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AlmostEmpty NUMERIC "0"
// Retrieval info: PRIVATE: AlmostEmptyThr NUMERIC "-1"
// Retrieval info: PRIVATE: AlmostFull NUMERIC "0"
// Retrieval info: PRIVATE: AlmostFullThr NUMERIC "-1"
// Retrieval info: PRIVATE: CLOCKS_ARE_SYNCHRONIZED NUMERIC "0"
// Retrieval info: PRIVATE: Clock NUMERIC "4"
// Retrieval info: PRIVATE: Depth NUMERIC "16"
// Retrieval info: PRIVATE: Empty NUMERIC "1"
// Retrieval info: PRIVATE: Full NUMERIC "1"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: PRIVATE: LE_BasedFIFO NUMERIC "0"
// Retrieval info: PRIVATE: LegacyRREQ NUMERIC "1"
// Retrieval info: PRIVATE: MAX_DEPTH_BY_9 NUMERIC "0"
// Retrieval info: PRIVATE: OVERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: Optimize NUMERIC "0"
// Retrieval info: PRIVATE: RAM_BLOCK_TYPE NUMERIC "2"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: UNDERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: UsedW NUMERIC "1"
// Retrieval info: PRIVATE: Width NUMERIC "10"
// Retrieval info: PRIVATE: dc_aclr NUMERIC "1"
// Retrieval info: PRIVATE: diff_widths NUMERIC "0"
// Retrieval info: PRIVATE: msb_usedw NUMERIC "0"
// Retrieval info: PRIVATE: output_width NUMERIC "10"
// Retrieval info: PRIVATE: rsEmpty NUMERIC "1"
// Retrieval info: PRIVATE: rsFull NUMERIC "1"
// Retrieval info: PRIVATE: rsUsedW NUMERIC "1"
// Retrieval info: PRIVATE: sc_aclr NUMERIC "0"
// Retrieval info: PRIVATE: sc_sclr NUMERIC "0"
// Retrieval info: PRIVATE: wsEmpty NUMERIC "0"
// Retrieval info: PRIVATE: wsFull NUMERIC "1"
// Retrieval info: PRIVATE: wsUsedW NUMERIC "1"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: CONSTANT: LPM_HINT STRING "RAM_BLOCK_TYPE=M4K"
// Retrieval info: CONSTANT: LPM_NUMWORDS NUMERIC "16"
// Retrieval info: CONSTANT: LPM_SHOWAHEAD STRING "OFF"
// Retrieval info: CONSTANT: LPM_TYPE STRING "dcfifo"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "10"
// Retrieval info: CONSTANT: LPM_WIDTHU NUMERIC "4"
// Retrieval info: CONSTANT: OVERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: RDSYNC_DELAYPIPE NUMERIC "4"
// Retrieval info: CONSTANT: UNDERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: USE_EAB STRING "ON"
// Retrieval info: CONSTANT: WRITE_ACLR_SYNCH STRING "OFF"
// Retrieval info: CONSTANT: WRSYNC_DELAYPIPE NUMERIC "4"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT GND "aclr"
// Retrieval info: USED_PORT: data 0 0 10 0 INPUT NODEFVAL "data[9..0]"
// Retrieval info: USED_PORT: q 0 0 10 0 OUTPUT NODEFVAL "q[9..0]"
// Retrieval info: USED_PORT: rdclk 0 0 0 0 INPUT NODEFVAL "rdclk"
// Retrieval info: USED_PORT: rdempty 0 0 0 0 OUTPUT NODEFVAL "rdempty"
// Retrieval info: USED_PORT: rdfull 0 0 0 0 OUTPUT NODEFVAL "rdfull"
// Retrieval info: USED_PORT: rdreq 0 0 0 0 INPUT NODEFVAL "rdreq"
// Retrieval info: USED_PORT: rdusedw 0 0 4 0 OUTPUT NODEFVAL "rdusedw[3..0]"
// Retrieval info: USED_PORT: wrclk 0 0 0 0 INPUT NODEFVAL "wrclk"
// Retrieval info: USED_PORT: wrfull 0 0 0 0 OUTPUT NODEFVAL "wrfull"
// Retrieval info: USED_PORT: wrreq 0 0 0 0 INPUT NODEFVAL "wrreq"
// Retrieval info: USED_PORT: wrusedw 0 0 4 0 OUTPUT NODEFVAL "wrusedw[3..0]"
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: CONNECT: @data 0 0 10 0 data 0 0 10 0
// Retrieval info: CONNECT: @rdclk 0 0 0 0 rdclk 0 0 0 0
// Retrieval info: CONNECT: @rdreq 0 0 0 0 rdreq 0 0 0 0
// Retrieval info: CONNECT: @wrclk 0 0 0 0 wrclk 0 0 0 0
// Retrieval info: CONNECT: @wrreq 0 0 0 0 wrreq 0 0 0 0
// Retrieval info: CONNECT: q 0 0 10 0 @q 0 0 10 0
// Retrieval info: CONNECT: rdempty 0 0 0 0 @rdempty 0 0 0 0
// Retrieval info: CONNECT: rdfull 0 0 0 0 @rdfull 0 0 0 0
// Retrieval info: CONNECT: rdusedw 0 0 4 0 @rdusedw 0 0 4 0
// Retrieval info: CONNECT: wrfull 0 0 0 0 @wrfull 0 0 0 0
// Retrieval info: CONNECT: wrusedw 0 0 4 0 @wrusedw 0 0 4 0
// Retrieval info: GEN_FILE: TYPE_NORMAL my_fifo.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL my_fifo.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL my_fifo.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL my_fifo.bsf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL my_fifo_inst.vhd TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL my_fifo_syn.v TRUE
// Retrieval info: LIB_FILE: altera_mf


atravessador_uart.elf:     file format elf32-littlenios2
atravessador_uart.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000075c memsz 0x00000768 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000590  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  000005b0  000005b0  000015b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000001c0  000005bc  000005bc  000015bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  0000077c  0000077c  0000177c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000148  00000000  00000000  000017a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000001e2  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001bb5  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005d5  00000000  00000000  00003687  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001641  00000000  00000000  00003c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001a8  00000000  00000000  000052a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000000a2  00000000  00000000  00005448  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000001ae  00000000  00000000  000054ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00005698  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  000056a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000062cf  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000062d2  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000062d5  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000062d6  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  000062d7  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  000062e0  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  000062e9  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000d  00000000  00000000  000062f2  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000045  00000000  00000000  000062ff  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0002982c  00000000  00000000  00006344  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
000005b0 l    d  .rodata	00000000 .rodata
000005bc l    d  .rwdata	00000000 .rwdata
0000077c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000564 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
000002b8 g     F .text	00000040 alt_main
00000764 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000780 g     O .bss	00000004 alt_argv
00008764 g       *ABS*	00000000 _gp
000005e4 g     O .rwdata	00000180 alt_fd_list
000003bc g     F .text	00000104 altera_avalon_jtag_uart_read
00000778 g     O .rwdata	00000004 alt_max_fd
00000788 g       *ABS*	00000000 __bss_end
00000248 g     F .text	00000070 alt_getchar
000005bc g     O .rwdata	00000028 alt_dev_null
00000770 g     O .rwdata	00000008 alt_dev_list
00000788 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000004c0 g     F .text	000000a4 altera_avalon_jtag_uart_write
00000020 g     F .text	00000038 _start
000003a0 g     F .text	0000001c alt_sys_init
00000788 g       *ABS*	00000000 __alt_stack_base
0000077c g       *ABS*	00000000 __bss_start
00000058 g     F .text	000001f0 main
00000784 g     O .bss	00000004 alt_envp
0000036c g     F .text	00000034 alt_irq_init
0000077c g     O .bss	00000004 alt_argc
00000768 g     O .rwdata	00000008 alt_fs_list
0000077c g       *ABS*	00000000 _edata
00000788 g       *ABS*	00000000 _end
00000000 g       *ABS*	00000000 __alt_mem_memory
00000590 g     F .text	00000020 altera_nios2_qsys_irq_init
0000000c g       .entry	00000000 exit
00002000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000002f8 g     F .text	00000074 alt_putchar



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a1d914 	ori	gp,gp,34660
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1081df14 	ori	r2,r2,1916

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c1e214 	ori	r3,r3,1928

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  50:	00002b80 	call	2b8 <alt_main>

00000054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  54:	003fff06 	br	54 <alt_after_alt_main>

00000058 <main>:
#include <stdint.h>
#include "system.h"
#include "sys/alt_stdio.h"

int main(void)
{
  58:	defff704 	addi	sp,sp,-36
  5c:	dfc00815 	stw	ra,32(sp)
  60:	df000715 	stw	fp,28(sp)
  64:	df000704 	addi	fp,sp,28
	volatile uint32_t *reg32 = (uint32_t*)0x3008;
  68:	008c0204 	movi	r2,12296
  6c:	e0bffc15 	stw	r2,-16(fp)
	uint32_t i;
	char input_char;
	char nums[10] = {'0','1','2','3','4','5','6','7','8','9'};
  70:	00800c04 	movi	r2,48
  74:	e0bffd05 	stb	r2,-12(fp)
  78:	00800c44 	movi	r2,49
  7c:	e0bffd45 	stb	r2,-11(fp)
  80:	00800c84 	movi	r2,50
  84:	e0bffd85 	stb	r2,-10(fp)
  88:	00800cc4 	movi	r2,51
  8c:	e0bffdc5 	stb	r2,-9(fp)
  90:	00800d04 	movi	r2,52
  94:	e0bffe05 	stb	r2,-8(fp)
  98:	00800d44 	movi	r2,53
  9c:	e0bffe45 	stb	r2,-7(fp)
  a0:	00800d84 	movi	r2,54
  a4:	e0bffe85 	stb	r2,-6(fp)
  a8:	00800dc4 	movi	r2,55
  ac:	e0bffec5 	stb	r2,-5(fp)
  b0:	00800e04 	movi	r2,56
  b4:	e0bfff05 	stb	r2,-4(fp)
  b8:	00800e44 	movi	r2,57
  bc:	e0bfff45 	stb	r2,-3(fp)
	uint32_t out_num;

   while (1)
   {
	   // Recebe um caracter
	   input_char = alt_getchar();
  c0:	00002480 	call	248 <alt_getchar>
  c4:	e0bffa05 	stb	r2,-24(fp)

	   // Manda comando de escrever e 0s 3 bits menos significativos
	   i = 0x83; // 100x xx11 write load enable
  c8:	008020c4 	movi	r2,131
  cc:	e0bffb15 	stw	r2,-20(fp)
	   i |= ((input_char & 0x07) << 2);
  d0:	e0bffa03 	ldbu	r2,-24(fp)
  d4:	10803fcc 	andi	r2,r2,255
  d8:	108001cc 	andi	r2,r2,7
  dc:	1085883a 	add	r2,r2,r2
  e0:	1085883a 	add	r2,r2,r2
  e4:	1007883a 	mov	r3,r2
  e8:	e0bffb17 	ldw	r2,-20(fp)
  ec:	10c4b03a 	or	r2,r2,r3
  f0:	e0bffb15 	stw	r2,-20(fp)
	   *reg32 = i;
  f4:	e0fffc17 	ldw	r3,-16(fp)
  f8:	e0bffb17 	ldw	r2,-20(fp)
  fc:	18800015 	stw	r2,0(r3)

	   // Manda o resto do comando de load e os outros 5 bits
	   i = 0xe0; // 111x xxxx load
 100:	00803804 	movi	r2,224
 104:	e0bffb15 	stw	r2,-20(fp)
	   i |= ((input_char & 0xf8) >> 3);
 108:	e0bffa07 	ldb	r2,-24(fp)
 10c:	10803e0c 	andi	r2,r2,248
 110:	1005d0fa 	srai	r2,r2,3
 114:	1007883a 	mov	r3,r2
 118:	e0bffb17 	ldw	r2,-20(fp)
 11c:	10c4b03a 	or	r2,r2,r3
 120:	e0bffb15 	stw	r2,-20(fp)
	   *reg32 = i;
 124:	e0fffc17 	ldw	r3,-16(fp)
 128:	e0bffb17 	ldw	r2,-20(fp)
 12c:	18800015 	stw	r2,0(r3)
	   // Manda comando para desativar o load e ativar a contagem
	   //i = 0x81; // 1000 0001 write no load enable
	   //*reg32 = i;

	   // Le o numero de 0s e 1s
	   i = 0x60; // 0110 0000 read reg1
 130:	00801804 	movi	r2,96
 134:	e0bffb15 	stw	r2,-20(fp)
	   *reg32 = i;
 138:	e0fffc17 	ldw	r3,-16(fp)
 13c:	e0bffb17 	ldw	r2,-20(fp)
 140:	18800015 	stw	r2,0(r3)

	   out_num = *reg32;
 144:	e0bffc17 	ldw	r2,-16(fp)
 148:	10800017 	ldw	r2,0(r2)
 14c:	e0bff915 	stw	r2,-28(fp)

	   // Printa o caracter inserido
	   alt_putchar(input_char);
 150:	e13ffa07 	ldb	r4,-24(fp)
 154:	00002f80 	call	2f8 <alt_putchar>
	   alt_putchar(' ');
 158:	01000804 	movi	r4,32
 15c:	00002f80 	call	2f8 <alt_putchar>
	   for (i=0; i<8; i++)
 160:	e03ffb15 	stw	zero,-20(fp)
 164:	00001106 	br	1ac <main+0x154>
	   {
		   if (input_char & (1<<(7-i)))
 168:	e13ffa07 	ldb	r4,-24(fp)
 16c:	00c001c4 	movi	r3,7
 170:	e0bffb17 	ldw	r2,-20(fp)
 174:	1885c83a 	sub	r2,r3,r2
 178:	2085d83a 	sra	r2,r4,r2
 17c:	1080004c 	andi	r2,r2,1
 180:	10803fcc 	andi	r2,r2,255
 184:	1005003a 	cmpeq	r2,r2,zero
 188:	1000031e 	bne	r2,zero,198 <main+0x140>
			   alt_putchar('1');
 18c:	01000c44 	movi	r4,49
 190:	00002f80 	call	2f8 <alt_putchar>
 194:	00000206 	br	1a0 <main+0x148>
		   else
			   alt_putchar('0');
 198:	01000c04 	movi	r4,48
 19c:	00002f80 	call	2f8 <alt_putchar>
	   out_num = *reg32;

	   // Printa o caracter inserido
	   alt_putchar(input_char);
	   alt_putchar(' ');
	   for (i=0; i<8; i++)
 1a0:	e0bffb17 	ldw	r2,-20(fp)
 1a4:	10800044 	addi	r2,r2,1
 1a8:	e0bffb15 	stw	r2,-20(fp)
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	10800230 	cmpltui	r2,r2,8
 1b4:	103fec1e 	bne	r2,zero,168 <main+0x110>
		   if (input_char & (1<<(7-i)))
			   alt_putchar('1');
		   else
			   alt_putchar('0');
	   }
	   alt_putchar('\n');
 1b8:	01000284 	movi	r4,10
 1bc:	00002f80 	call	2f8 <alt_putchar>

	   // Printa o numero de 0s e 1s
	   alt_putchar('0');
 1c0:	01000c04 	movi	r4,48
 1c4:	00002f80 	call	2f8 <alt_putchar>
	   alt_putchar(':');
 1c8:	01000e84 	movi	r4,58
 1cc:	00002f80 	call	2f8 <alt_putchar>
	   alt_putchar(nums[out_num & 0xff]);
 1d0:	e0bff917 	ldw	r2,-28(fp)
 1d4:	10c03fcc 	andi	r3,r2,255
 1d8:	e0bffd04 	addi	r2,fp,-12
 1dc:	10c5883a 	add	r2,r2,r3
 1e0:	10800003 	ldbu	r2,0(r2)
 1e4:	11003fcc 	andi	r4,r2,255
 1e8:	2100201c 	xori	r4,r4,128
 1ec:	213fe004 	addi	r4,r4,-128
 1f0:	00002f80 	call	2f8 <alt_putchar>
	   alt_putchar('\n');
 1f4:	01000284 	movi	r4,10
 1f8:	00002f80 	call	2f8 <alt_putchar>
	   alt_putchar('1');
 1fc:	01000c44 	movi	r4,49
 200:	00002f80 	call	2f8 <alt_putchar>
	   alt_putchar(':');
 204:	01000e84 	movi	r4,58
 208:	00002f80 	call	2f8 <alt_putchar>
	   alt_putchar(nums[(out_num>>8) & 0xff]);
 20c:	e0bff917 	ldw	r2,-28(fp)
 210:	1004d23a 	srli	r2,r2,8
 214:	10c03fcc 	andi	r3,r2,255
 218:	e0bffd04 	addi	r2,fp,-12
 21c:	10c5883a 	add	r2,r2,r3
 220:	10800003 	ldbu	r2,0(r2)
 224:	11003fcc 	andi	r4,r2,255
 228:	2100201c 	xori	r4,r4,128
 22c:	213fe004 	addi	r4,r4,-128
 230:	00002f80 	call	2f8 <alt_putchar>
	   alt_putchar('\n');
 234:	01000284 	movi	r4,10
 238:	00002f80 	call	2f8 <alt_putchar>
	   alt_putchar('\n');
 23c:	01000284 	movi	r4,10
 240:	00002f80 	call	2f8 <alt_putchar>
   }
 244:	003f9e06 	br	c0 <main+0x68>

00000248 <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 248:	defffc04 	addi	sp,sp,-16
 24c:	dfc00315 	stw	ra,12(sp)
 250:	df000215 	stw	fp,8(sp)
 254:	df000204 	addi	fp,sp,8
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 258:	00800034 	movhi	r2,0
 25c:	10817904 	addi	r2,r2,1508
 260:	11c00217 	ldw	r7,8(r2)
 264:	01000034 	movhi	r4,0
 268:	2101d904 	addi	r4,r4,1892
 26c:	e17ffe04 	addi	r5,fp,-8
 270:	01800044 	movi	r6,1
 274:	00003bc0 	call	3bc <altera_avalon_jtag_uart_read>
 278:	10800048 	cmpgei	r2,r2,1
 27c:	1000031e 	bne	r2,zero,28c <alt_getchar+0x44>
        return -1;
 280:	00bfffc4 	movi	r2,-1
 284:	e0bfff15 	stw	r2,-4(fp)
 288:	00000506 	br	2a0 <alt_getchar+0x58>
    }
    return c;
 28c:	e0bffe03 	ldbu	r2,-8(fp)
 290:	10803fcc 	andi	r2,r2,255
 294:	1080201c 	xori	r2,r2,128
 298:	10bfe004 	addi	r2,r2,-128
 29c:	e0bfff15 	stw	r2,-4(fp)
 2a0:	e0bfff17 	ldw	r2,-4(fp)
#else
    return getchar();
#endif
}
 2a4:	e037883a 	mov	sp,fp
 2a8:	dfc00117 	ldw	ra,4(sp)
 2ac:	df000017 	ldw	fp,0(sp)
 2b0:	dec00204 	addi	sp,sp,8
 2b4:	f800283a 	ret

000002b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2b8:	defffe04 	addi	sp,sp,-8
 2bc:	dfc00115 	stw	ra,4(sp)
 2c0:	df000015 	stw	fp,0(sp)
 2c4:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2c8:	0009883a 	mov	r4,zero
 2cc:	000036c0 	call	36c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2d0:	00003a00 	call	3a0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2d4:	d1200617 	ldw	r4,-32744(gp)
 2d8:	d1600717 	ldw	r5,-32740(gp)
 2dc:	d1a00817 	ldw	r6,-32736(gp)
 2e0:	00000580 	call	58 <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 2e4:	e037883a 	mov	sp,fp
 2e8:	dfc00117 	ldw	ra,4(sp)
 2ec:	df000017 	ldw	fp,0(sp)
 2f0:	dec00204 	addi	sp,sp,8
 2f4:	f800283a 	ret

000002f8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 2f8:	defffb04 	addi	sp,sp,-20
 2fc:	dfc00415 	stw	ra,16(sp)
 300:	df000315 	stw	fp,12(sp)
 304:	df000304 	addi	fp,sp,12
 308:	e13ffe15 	stw	r4,-8(fp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 30c:	e0bffe17 	ldw	r2,-8(fp)
 310:	1007883a 	mov	r3,r2
 314:	00bfffc4 	movi	r2,-1
 318:	1884703a 	and	r2,r3,r2
 31c:	e0bffd05 	stb	r2,-12(fp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 320:	01000034 	movhi	r4,0
 324:	2101d904 	addi	r4,r4,1892
 328:	e17ffd04 	addi	r5,fp,-12
 32c:	01800044 	movi	r6,1
 330:	000f883a 	mov	r7,zero
 334:	00004c00 	call	4c0 <altera_avalon_jtag_uart_write>
 338:	10bfffd8 	cmpnei	r2,r2,-1
 33c:	1000031e 	bne	r2,zero,34c <alt_putchar+0x54>
        return -1;
 340:	00bfffc4 	movi	r2,-1
 344:	e0bfff15 	stw	r2,-4(fp)
 348:	00000206 	br	354 <alt_putchar+0x5c>
    }
    return c;
 34c:	e0bffe17 	ldw	r2,-8(fp)
 350:	e0bfff15 	stw	r2,-4(fp)
 354:	e0bfff17 	ldw	r2,-4(fp)
#else
    return putchar(c);
#endif
}
 358:	e037883a 	mov	sp,fp
 35c:	dfc00117 	ldw	ra,4(sp)
 360:	df000017 	ldw	fp,0(sp)
 364:	dec00204 	addi	sp,sp,8
 368:	f800283a 	ret

0000036c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 36c:	defffd04 	addi	sp,sp,-12
 370:	dfc00215 	stw	ra,8(sp)
 374:	df000115 	stw	fp,4(sp)
 378:	df000104 	addi	fp,sp,4
 37c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 380:	00005900 	call	590 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 384:	00800044 	movi	r2,1
 388:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 38c:	e037883a 	mov	sp,fp
 390:	dfc00117 	ldw	ra,4(sp)
 394:	df000017 	ldw	fp,0(sp)
 398:	dec00204 	addi	sp,sp,8
 39c:	f800283a 	ret

000003a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 3a0:	deffff04 	addi	sp,sp,-4
 3a4:	df000015 	stw	fp,0(sp)
 3a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
 3ac:	e037883a 	mov	sp,fp
 3b0:	df000017 	ldw	fp,0(sp)
 3b4:	dec00104 	addi	sp,sp,4
 3b8:	f800283a 	ret

000003bc <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 3bc:	defff604 	addi	sp,sp,-40
 3c0:	df000915 	stw	fp,36(sp)
 3c4:	df000904 	addi	fp,sp,36
 3c8:	e13ffb15 	stw	r4,-20(fp)
 3cc:	e17ffc15 	stw	r5,-16(fp)
 3d0:	e1bffd15 	stw	r6,-12(fp)
 3d4:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
 3d8:	e0bffb17 	ldw	r2,-20(fp)
 3dc:	10800017 	ldw	r2,0(r2)
 3e0:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
 3e4:	e0bffc17 	ldw	r2,-16(fp)
 3e8:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
 3ec:	e0bffd17 	ldw	r2,-12(fp)
 3f0:	1007883a 	mov	r3,r2
 3f4:	e0bffc17 	ldw	r2,-16(fp)
 3f8:	10c5883a 	add	r2,r2,r3
 3fc:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
 400:	00001606 	br	45c <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 404:	e0bffa17 	ldw	r2,-24(fp)
 408:	10800037 	ldwio	r2,0(r2)
 40c:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 410:	e0bff717 	ldw	r2,-36(fp)
 414:	10a0000c 	andi	r2,r2,32768
 418:	1005003a 	cmpeq	r2,r2,zero
 41c:	1000081e 	bne	r2,zero,440 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 420:	e0bff717 	ldw	r2,-36(fp)
 424:	1007883a 	mov	r3,r2
 428:	e0bff917 	ldw	r2,-28(fp)
 42c:	10c00005 	stb	r3,0(r2)
 430:	e0bff917 	ldw	r2,-28(fp)
 434:	10800044 	addi	r2,r2,1
 438:	e0bff915 	stw	r2,-28(fp)
 43c:	00000706 	br	45c <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
 440:	e0fff917 	ldw	r3,-28(fp)
 444:	e0bffc17 	ldw	r2,-16(fp)
 448:	1880071e 	bne	r3,r2,468 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
 44c:	e0bffe17 	ldw	r2,-8(fp)
 450:	1090000c 	andi	r2,r2,16384
 454:	1004c03a 	cmpne	r2,r2,zero
 458:	1000031e 	bne	r2,zero,468 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 45c:	e0fff917 	ldw	r3,-28(fp)
 460:	e0bff817 	ldw	r2,-32(fp)
 464:	18bfe736 	bltu	r3,r2,404 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 468:	e0fff917 	ldw	r3,-28(fp)
 46c:	e0bffc17 	ldw	r2,-16(fp)
 470:	18800526 	beq	r3,r2,488 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
 474:	e0fff917 	ldw	r3,-28(fp)
 478:	e0bffc17 	ldw	r2,-16(fp)
 47c:	1887c83a 	sub	r3,r3,r2
 480:	e0ffff15 	stw	r3,-4(fp)
 484:	00000906 	br	4ac <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
 488:	e0bffe17 	ldw	r2,-8(fp)
 48c:	1090000c 	andi	r2,r2,16384
 490:	1005003a 	cmpeq	r2,r2,zero
 494:	1000031e 	bne	r2,zero,4a4 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
 498:	00bffd44 	movi	r2,-11
 49c:	e0bfff15 	stw	r2,-4(fp)
 4a0:	00000206 	br	4ac <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
 4a4:	00bffec4 	movi	r2,-5
 4a8:	e0bfff15 	stw	r2,-4(fp)
 4ac:	e0bfff17 	ldw	r2,-4(fp)
}
 4b0:	e037883a 	mov	sp,fp
 4b4:	df000017 	ldw	fp,0(sp)
 4b8:	dec00104 	addi	sp,sp,4
 4bc:	f800283a 	ret

000004c0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4c0:	defff904 	addi	sp,sp,-28
 4c4:	df000615 	stw	fp,24(sp)
 4c8:	df000604 	addi	fp,sp,24
 4cc:	e13ffc15 	stw	r4,-16(fp)
 4d0:	e17ffd15 	stw	r5,-12(fp)
 4d4:	e1bffe15 	stw	r6,-8(fp)
 4d8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4dc:	e0bffc17 	ldw	r2,-16(fp)
 4e0:	10800017 	ldw	r2,0(r2)
 4e4:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
 4e8:	e0bffe17 	ldw	r2,-8(fp)
 4ec:	1007883a 	mov	r3,r2
 4f0:	e0bffd17 	ldw	r2,-12(fp)
 4f4:	10c5883a 	add	r2,r2,r3
 4f8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 4fc:	00001106 	br	544 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 500:	e0bffb17 	ldw	r2,-20(fp)
 504:	10800104 	addi	r2,r2,4
 508:	10800037 	ldwio	r2,0(r2)
 50c:	10bfffec 	andhi	r2,r2,65535
 510:	1005003a 	cmpeq	r2,r2,zero
 514:	10000b1e 	bne	r2,zero,544 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 518:	e13ffb17 	ldw	r4,-20(fp)
 51c:	e0bffd17 	ldw	r2,-12(fp)
 520:	10800003 	ldbu	r2,0(r2)
 524:	10c03fcc 	andi	r3,r2,255
 528:	18c0201c 	xori	r3,r3,128
 52c:	18ffe004 	addi	r3,r3,-128
 530:	e0bffd17 	ldw	r2,-12(fp)
 534:	10800044 	addi	r2,r2,1
 538:	e0bffd15 	stw	r2,-12(fp)
 53c:	2005883a 	mov	r2,r4
 540:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 544:	e0fffd17 	ldw	r3,-12(fp)
 548:	e0bffa17 	ldw	r2,-24(fp)
 54c:	18bfec36 	bltu	r3,r2,500 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 550:	e0bffe17 	ldw	r2,-8(fp)
}
 554:	e037883a 	mov	sp,fp
 558:	df000017 	ldw	fp,0(sp)
 55c:	dec00104 	addi	sp,sp,4
 560:	f800283a 	ret

00000564 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 564:	defffc04 	addi	sp,sp,-16
 568:	df000315 	stw	fp,12(sp)
 56c:	df000304 	addi	fp,sp,12
 570:	e13ffd15 	stw	r4,-12(fp)
 574:	e17ffe15 	stw	r5,-8(fp)
 578:	e1bfff15 	stw	r6,-4(fp)
  return len;
 57c:	e0bfff17 	ldw	r2,-4(fp)
}
 580:	e037883a 	mov	sp,fp
 584:	df000017 	ldw	fp,0(sp)
 588:	dec00104 	addi	sp,sp,4
 58c:	f800283a 	ret

00000590 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 590:	deffff04 	addi	sp,sp,-4
 594:	df000015 	stw	fp,0(sp)
 598:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 59c:	000170fa 	wrctl	ienable,zero
}
 5a0:	e037883a 	mov	sp,fp
 5a4:	df000017 	ldw	fp,0(sp)
 5a8:	dec00104 	addi	sp,sp,4
 5ac:	f800283a 	ret
